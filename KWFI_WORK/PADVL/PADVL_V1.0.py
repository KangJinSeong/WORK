'''
Date : 2022.05.18
Title: PADVL DDS chip Control
By: KJS
'''

import numpy as np
import spidev
import time
import RPi.GPIO as GPIO

EN_CVDDX = 17
Triger = 27
SHDN = 22
reset = 23


GPIO.setmode(GPIO.BCM)
GPIO.setup(EN_CVDDX, GPIO.OUT)
GPIO.setup(Triger, GPIO.OUT)
GPIO.setup(SHDN, GPIO.OUT)
GPIO.setup(reset, GPIO.OUT)

GPIO.output(EN_CVDDX,False)
# GPIO.output(Triger,True)
GPIO.output(reset,True)
# GPIO.output(SHDN,False)

bus = 0
device = 0

spi = spidev.SpiDev()
spi.open(bus, device)
spi.max_speed_hz = 1000000
spi.mode = 0b00

buffer = [0x0000, 0x0000,
0x0001, 0x0E00,
0x0002, 0x0000,
0x0003, 0x0000,
0x0004, 0x4000,
0x0005, 0x4000,
0x0006, 0x4000,
0x0007, 0x4000,
0x0008, 0x0000,
0x0009, 0x1F00,
0x000A, 0x1F00,
0x000B, 0x1F00,
0x000C, 0x1F00,
0x000D, 0x0000,
0x000E, 0x0000,
0x000F, 0x0000,
0x0010, 0x0000,
0x0011, 0x0000,
0x0012, 0x0000,
0x0013, 0x0000,
0x0014, 0x0000,
0x0015, 0x0000,
0x0016, 0x0000,
0x0017, 0x0000,
0x0018, 0x0000,
0x0019, 0x0000,
0x001A, 0x0000,
0x001B, 0x0000,
0x001C, 0x0000,
0x001D, 0x0000,
0x001E, 0x0000,
0x001F, 0x0000,
0x0020, 0x000E,
0x0022, 0x0000,
0x0023, 0x0000,
0x0024, 0x0000,
0x0025, 0x0000,
0x0026, 0x3232,
0x0027, 0x3232,
0x0028, 0x0111,
0x0029, 0xFFFF,
0x002A, 0x0101,
0x002B, 0x0101,
0x002C, 0x0003,
0x002D, 0x0000,
0x002E, 0x0000,
0x002F, 0x0000,
0x0030, 0x0000,
0x0031, 0x0000,
0x0032, 0x4000,
0x0033, 0x2000,
0x0034, 0x2000,
0x0035, 0x4000,
0x0036, 0x0001,
0x0037, 0x0200,
0x0038, 0x0000,
0x0039, 0x0000,
0x003A, 0x0000,
0x003B, 0x0000,
0x003C, 0x0000,
0x003D, 0x0000,
0x003E, 0x0A3D,
0x003F, 0x7100,
0x0040, 0x0000,
0x0041, 0x0000,
0x0042, 0x0000,
0x0043, 0x0000,
0x0044, 0x0000,
0x0045, 0x0000,
0x0046, 0x0000,
0x0047, 0x0000,
0x0048, 0x0000,
0x0049, 0x0000,
0x004A, 0x0000,
0x004B, 0x0000,
0x004C, 0x0000,
0x004D, 0x0000,
0x004E, 0x0000,
0x004F, 0x0000,
0x0050, 0x07D0,
0x0051, 0x0000,
0x0052, 0x0000,
0x0053, 0x0100,
0x0054, 0x03E8,
0x0055, 0x0000,
0x0056, 0x0000,
0x0057, 0x0100,
0x0058,0x0BB8,
0x0059,0x0000,
0x005A, 0x0000,
0x005B, 0x0100,
0x005C, 0x0FA0,
0x005D, 0x0000 ,
0x005E, 0x0000 ,
0x005F, 0x0100 ,
0x0060, 0x0004,
0x0061, 0x0000 ,
0x0062, 0x0000 ,
0x0063, 0x0000 ,
0x0064, 0x0000 ,
0x0065, 0x0000 ,
0x0066, 0x0000,
0x0067, 0x0000 ,
0x0068, 0x0000 ,
0x0069, 0x0000 ,
0x006A, 0x0000 ,
0x006B, 0x0000 ,
0x006C, 0x0000 ,
0x006D, 0x0000 ,
0x006E, 0x0000 ,
0x006F, 0x0000 ,
0x0070, 0x0000 ,
0x0071, 0x0000,
0x0072, 0x0000 ,
0x0073, 0x0000 ,
0x0074, 0x0000 ,
0x0075, 0x0000 ,
0x0076, 0x0000 ,
0x0077, 0x0000,
0x0078, 0x0000 ,
0x0079, 0x0000 ,
0x007A, 0x0000 ,
0x007B, 0x0000 ,
0x007C, 0x0000 ,
0x007D, 0x0000 ,
0x007E, 0x0000 ,
0x007F, 0x0000]

class PADVL:
    def __init__(self, buffer):
        self.buffer = buffer
        self.SUM_result = []
        
    def send_spi_data(self):        
        for j in range(len(self.buffer)):
            MSB = (self.buffer[j]>>8) & 0xFF
            self.SUM_result.append(MSB)
            LSB = self.buffer[j] & 0xFF
            self.SUM_result.append(LSB)
        spi.xfer(self.SUM_result)
#         spi.close()
        print('end')
    def Setup_device(self):
        GPIO.output(reset,False)
        time.sleep(0.05)
        GPIO.output(reset,True)
        time.sleep(0.05)
        GPIO.output(EN_CVDDX,False)
        time.sleep(0.05)
        GPIO.output(SHDN,False)
    def Start_pattern(self):
        GPIO.output(Triger,False)
    def Stop_pattern(self):
        GPIO.output(Triger,True)
        
if __name__ == "__main__":
    print('START')   
    P = PADVL(buffer)
    P.Setup_device()
    P.send_spi_data()
#     P.Start_pattern()

    
    addr = buffer[2]
    read_addr = 0x8000 + addr

    result1 = []

    MSB1 = (read_addr>>8) & 0xFF
    result1.append(MSB1)
    LSB1 = read_addr & 0xFF
    result1.append(LSB1)
    spi.xfer(result1)
    reg_data = spi.xfer([0,0])
    print(hex(reg_data[1]),hex(reg_data[0]))
#     spi.close()
#     GPIO.cleanup()
